// Generated by CoffeeScript 1.8.0
var ROTATION_UNIT, ROTATION_UNIT_RADIANS, React;

React = require('react');

ROTATION_UNIT = 30;

ROTATION_UNIT_RADIANS = ROTATION_UNIT * (Math.PI / 180);

module.exports = React.createClass({
  getInitialState: function() {
    var now, startingHour, startingMinute;
    now = new Date();
    startingHour = this.props.hour != null ? this.props.hour : now.getHours();
    startingMinute = this.props.minute != null ? this.props.minute : now.getMinutes();
    return {
      hour: startingHour,
      hourRotation: startingHour * ROTATION_UNIT,
      hourHandRadius: this.props.hourHandRadius != null ? this.props.hourHandRadius : 15,
      minute: startingMinute,
      minuteRotation: (startingMinute / 5) * ROTATION_UNIT,
      minuteHandRadius: this.props.minuteHandRadius != null ? this.props.minuteHandRadius : 20,
      isPM: startingHour >= 12,
      areNumbersVisible: this.props.areNumbersVisible != null ? this.props.areNumbersVisible : true,
      numberPadding: this.props.numberPadding != null ? this.props.numberPadding : 20,
      centerPointRadius: this.props.centerPointRadius != null ? this.props.centerPointRadius : 10,
      clockRadius: 0,
      xCenter: 0,
      yCenter: 0
    };
  },
  setCenter: function() {
    var clockRadius, svgNode;
    svgNode = this.refs.svgContainer.getDOMNode();
    if (svgNode.offsetHeight > svgNode.offsetWidth) {
      clockRadius = svgNode.offsetWidth / 2;
    } else {
      clockRadius = svgNode.offsetHeight / 2;
    }
    return this.setState({
      xCenter: svgNode.offsetWidth / 2,
      yCenter: svgNode.offsetHeight / 2,
      clockRadius: clockRadius
    });
  },
  componentDidMount: function() {
    window.addEventListener('resize', this.setCenter);
    this.setCenter();
    return window.setTimeout(this.setCenter, 0);
  },
  componentWillUnmount: function() {
    return window.removeEventListener('resize', this.setCenter);
  },
  handleDragStart: function(e) {
    e.preventDefault();
    this.isDraggable = true;
    document.addEventListener('mouseup', this.handleDragStop);
    document.addEventListener('mousemove', this.handleDrag);
    document.addEventListener('touchend', this.handleDragStop);
    return document.addEventListener('touchmove', this.handleDrag);
  },
  handleDragStop: function(e) {
    e.preventDefault();
    this.isDraggable = false;
    document.removeEventListener('mouseup', this.handleDragStop);
    document.removeEventListener('mousemove', this.handleDrag);
    document.removeEventListener('touchend', this.handleDragStop);
    document.removeEventListener('touchmove', this.handleDrag);
    this.setState({
      'currentDragType': ''
    });
    return this.triggerTimeUpdate();
  },
  triggerTimeUpdate: function() {
    var _base;
    return typeof (_base = this.props).onTimeChange === "function" ? _base.onTimeChange({
      hour: this.state.hour,
      minute: this.state.minute,
      isPM: this.state.isPM
    }) : void 0;
  },
  findAngle: function(center, point) {
    var aR, delta;
    delta = {
      x: center.x - point.x,
      y: center.y - point.y
    };
    aR = Math.atan2(-delta.x, delta.y);
    return aR * (180 / Math.PI);
  },
  handleDrag: function(e) {
    var angle, center, direction, directionSigned, mouse, state, _ref, _ref1;
    e.preventDefault();
    if (!this.isDraggable) {
      return;
    }
    e.stopPropagation();
    center = {
      x: this.state.xCenter,
      y: this.state.yCenter
    };
    mouse = {
      x: e.clientX != null ? e.clientX : (_ref = e.touches) != null ? _ref[0].clientX : void 0,
      y: e.clientY != null ? e.clientY : (_ref1 = e.touches) != null ? _ref1[0].clientY : void 0
    };
    angle = this.findAngle(center, mouse);
    state = {};
    directionSigned = Math.round(angle / ROTATION_UNIT);
    direction = (directionSigned <= 0 ? directionSigned + 12 : directionSigned) % 12;
    state[this.state.currentDragType + "Rotation"] = direction * ROTATION_UNIT;
    if (this.state.currentDragType === 'minute') {
      state[this.state.currentDragType] = direction * 5;
    } else {
      if (this.state.isPM) {
        state[this.state.currentDragType] = direction + 12;
      } else {
        state[this.state.currentDragType] = direction;
      }
    }
    return this.setState(state);
  },
  handleHourDragStart: function(e) {
    this.setState({
      'currentDragType': 'hour'
    });
    return this.handleDragStart(e);
  },
  handleMinuteDragStart: function(e) {
    this.setState({
      'currentDragType': 'minute'
    });
    return this.handleDragStart(e);
  },
  _drawNumber: function(number, type) {
    var angle, modifierClassName, xTranslation, yTranslation;
    angle = (number * ROTATION_UNIT_RADIANS) + (Math.PI / 2);
    xTranslation = (this.state.clockRadius - this.state.numberPadding) * Math.cos(angle);
    yTranslation = (this.state.clockRadius - this.state.numberPadding) * Math.sin(angle);
    modifierClassName = '';
    if (type === 1) {
      number *= 5;
      modifierClassName = 'time-picker__numbers--hidden';
    }
    if (this.state.currentDragType === 'minute' && type === 1) {
      modifierClassName = '';
    }
    if (this.state.currentDragType === 'minute' && type !== 1) {
      modifierClassName = 'time-picker__numbers--hidden';
    }
    if (type === 0) {
      modifierClassName += ' time-picker__numbers--hour';
    } else {
      modifierClassName += ' time-picker__numbers--minute';
    }
    return React.createElement("text", {
      "x": "" + (this.state.xCenter - xTranslation),
      "y": "" + (this.state.yCenter - yTranslation),
      "key": number,
      "className": "time-picker__numbers " + modifierClassName
    }, number);
  },
  drawHour: function(number) {
    return this._drawNumber(number, 0);
  },
  drawMinute: function(number) {
    return this._drawNumber(number, 1);
  },
  handleAM: function() {
    var hour;
    hour = this.state.hour;
    if (this.state.hour >= 12) {
      hour = this.state.hour - 12;
    }
    this.setState({
      'isPM': false,
      'hour': hour
    });
    this.state.hour = hour;
    this.state.isPM = false;
    return this.triggerTimeUpdate();
  },
  handlePM: function() {
    var hour;
    hour = this.state.hour;
    if (this.state.hour < 12) {
      hour = this.state.hour + 12;
    }
    this.setState({
      'isPM': true,
      'hour': hour
    });
    this.state.hour = hour;
    this.state.isPM = true;
    return this.triggerTimeUpdate();
  },
  render: function() {
    var hourArmY2, hourHandlePosition, hourHandleScale, minuteArmY2, minuteHandlePosition, minuteHandleScale;
    hourHandleScale = this.state.currentDragType === 'hour' ? 1.1 : 1;
    minuteHandleScale = this.state.currentDragType === 'minute' ? 1.1 : 1;
    minuteArmY2 = this.state.yCenter - this.state.clockRadius * .75;
    hourArmY2 = this.state.yCenter - this.state.clockRadius * .5;
    minuteHandlePosition = {
      x: this.state.xCenter,
      y: minuteArmY2 + this.state.minuteHandRadius * 1.5
    };
    hourHandlePosition = {
      x: this.state.xCenter,
      y: hourArmY2 + this.state.hourHandRadius * 1.5
    };
    return React.createElement("time", {
      "className": "time-picker"
    }, React.createElement("svg", {
      "ref": "svgContainer",
      "className": "time-picker__clock"
    }, React.createElement("circle", {
      "className": "time-picker__face",
      "cx": "" + this.state.xCenter,
      "cy": "" + this.state.yCenter,
      "r": "" + this.state.clockRadius
    }), React.createElement("circle", {
      "className": "time-picker__center-point",
      "cx": "" + this.state.xCenter,
      "cy": "" + this.state.yCenter,
      "r": this.state.centerPointRadius
    }), React.createElement("line", {
      "className": "time-picker__arm time-picker__arm--minute",
      "x1": "" + this.state.xCenter,
      "y1": "" + this.state.yCenter,
      "x2": "" + this.state.xCenter,
      "y2": "" + minuteArmY2,
      "transform": "rotate(" + this.state.minuteRotation + ", " + this.state.xCenter + ", " + this.state.yCenter + ")",
      "onMouseDown": this.handleMinuteDragStart,
      "onTouchStart": this.handleMinuteDragStart
    }), React.createElement("circle", {
      "className": "time-picker__handle time-picker__handle--minute",
      "ref": "minuteHandle",
      "cx": "" + minuteHandlePosition.x,
      "cy": "" + minuteHandlePosition.y,
      "r": this.state.minuteHandRadius,
      "transform": "rotate(" + this.state.minuteRotation + ", " + this.state.xCenter + ", " + this.state.yCenter + ") translate(" + (-1 * this.state.xCenter * (minuteHandleScale - 1)) + ", " + (-1 * minuteHandlePosition.y * (minuteHandleScale - 1)) + ") scale(" + minuteHandleScale + ")",
      "onMouseDown": this.handleMinuteDragStart,
      "onTouchStart": this.handleMinuteDragStart
    }), React.createElement("line", {
      "className": "time-picker__arm time-picker__handle--hour",
      "x1": "" + this.state.xCenter,
      "y1": "" + this.state.yCenter,
      "x2": "" + this.state.xCenter,
      "y2": "" + hourArmY2,
      "onMouseDown": this.handleHourDragStart,
      "onTouchStart": this.handleHourDragStart,
      "transform": "rotate(" + this.state.hourRotation + ", " + this.state.xCenter + ", " + this.state.yCenter + ")"
    }), React.createElement("circle", {
      "className": "time-picker__handle time-picker__handle--hour",
      "ref": "hourHandle",
      "cx": "" + hourHandlePosition.x,
      "cy": "" + hourHandlePosition.y,
      "r": this.state.hourHandRadius,
      "onMouseDown": this.handleHourDragStart,
      "onTouchStart": this.handleHourDragStart,
      "transform": "rotate(" + this.state.hourRotation + ", " + this.state.xCenter + ", " + this.state.yCenter + ") translate(" + (-1 * this.state.xCenter * (hourHandleScale - 1)) + ", " + (-1 * hourHandlePosition.y * (hourHandleScale - 1)) + ") scale(" + hourHandleScale + ")"
    }), React.createElement("g", {
      "className": "time-picker__hours"
    }, (this.state.areNumbersVisible ? [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(this.drawHour) : '')), React.createElement("g", {
      "className": "time-picker__minutes"
    }, (this.state.areNumbersVisible ? [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(this.drawMinute) : ''))), React.createElement("nav", {
      "className": "time-picker__ampm"
    }, React.createElement("button", {
      "className": "time-picker__ampm__toggle time-picker__am " + (!this.state.isPM ? 'time-picker__ampm__toggle--active' : ''),
      "ref": "amButton",
      "onClick": this.handleAM,
      "onTouchEnd": this.handleAM
    }, "AM"), React.createElement("button", {
      "className": "time-picker__ampm__toggle time-picker__pm " + (this.state.isPM ? 'time-picker__ampm__toggle--active' : ''),
      "ref": "pmButton",
      "onClick": this.handlePM,
      "onTouchEnd": this.handlePM
    }, "PM")));
  }
});
